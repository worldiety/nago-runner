// Copyright (c) 2025 worldiety GmbH
//
// This file is part of the NAGO Low-Code Platform.
// Licensed under the terms specified in the LICENSE file.
//
// SPDX-License-Identifier: Custom-License

package caddy

import (
	"fmt"
	"github.com/worldiety/nago-runner/configuration"
	"github.com/worldiety/nago-runner/pkg/linux"
	"github.com/worldiety/nago-runner/setup"
	"log/slog"
)

func updateCaddyfile(logger *slog.Logger, settings setup.Settings, cfg configuration.Runner) (bool, error) {
	var tmp string
	// note that caddy is not able to start with zero byte config file, thus emit some comments
	tmp += "# Code generated by \"nago-runner\"; DO NOT EDIT.\n\n"
	for _, application := range cfg.Applications {
		if !application.ReverseProxy.Enabled {
			continue
		}

		for _, rule := range application.ReverseProxy.Rules {
			if rule.Redirect {
				tmp += caddyRedirect(rule)
			} else {
				tmp += caddyProxy(rule)
			}
		}
	}

	caddyFile := "/etc/caddy/Caddyfile"
	if linux.EqualBuf(caddyFile, []byte(tmp)) {
		return false, nil
	}

	if err := linux.WriteFile(caddyFile, []byte(tmp), 0644); err != nil {
		return false, fmt.Errorf("caddyfile: failed to write caddy file to %s: %s", caddyFile, err)
	}

	logger.Info("caddyfile updated")

	return true, nil
}

func caddyProxy(rule configuration.Rule) string {
	return fmt.Sprintf(`
%s {
	reverse_proxy %s:%d
}
`, rule.Location, rule.Host, rule.Port)
}

func caddyRedirect(rule configuration.Rule) string {
	return fmt.Sprintf(`
%s {
	redir %s{uri}
}
`, rule.Location, rule.RedirectTarget)
}
