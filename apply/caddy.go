// Copyright (c) 2025 worldiety GmbH
//
// This file is part of the NAGO Low-Code Platform.
// Licensed under the terms specified in the LICENSE file.
//
// SPDX-License-Identifier: Custom-License

package apply

import (
	"fmt"
	"github.com/worldiety/nago-runner/configuration"
	"github.com/worldiety/nago-runner/pkg/linux"
	"github.com/worldiety/nago-runner/pkg/run"
	"log/slog"
)

func Caddy(cfg configuration.Runner) error {
	var tmp string
	// note that caddy is not able to start with zero byte config file, thus emit some comments
	tmp += "# Code generated by \"nago-runner\"; DO NOT EDIT.\n\n"
	for _, application := range cfg.Applications {
		if !application.ReverseProxy.Enabled {
			continue
		}

		for _, rule := range application.ReverseProxy.Rules {
			if rule.Redirect {
				tmp += caddyRedirect(rule)
			} else {
				tmp += caddyProxy(rule)
			}
		}
	}

	cpath, err := linux.Which("caddy")
	if err != nil {
		// exit early, we will cause trouble with existing files, if
		return fmt.Errorf("cannot find caddy executable: %w", err)
	} else {
		if cpath == "" {
			_ = run.Command("apt", "update")
			if err := run.Command("apt", "install", "-y", "caddy"); err != nil {
				return fmt.Errorf("cannot install caddy: %w", err)
			}

			// after installing freshly, caddy does not yet run
			if err := run.Command("systemctl", "start", "caddy"); err != nil {
				return fmt.Errorf("error starting caddy: %w", err)
			}
		}
	}

	caddyFile := "/etc/caddy/Caddyfile"
	if EqualBuf(caddyFile, []byte(tmp)) {
		slog.Info("caddy configuration unchanged")
		return nil
	}

	if err := WriteFile(caddyFile, []byte(tmp), 0644); err != nil {
		return fmt.Errorf("caddyfile: failed to write caddy file to %s: %s", caddyFile, err)
	}

	if err := run.Command("systemctl", "reload", "caddy"); err != nil {
		return fmt.Errorf("error reloading caddy: %w", err)
	}

	slog.Info("caddy changed and applied")
	return nil
}

func caddyProxy(rule configuration.Rule) string {
	return fmt.Sprintf(`
%s {
	reverse_proxy %s:%d
}
`, rule.Location, rule.Host, rule.Port)
}

func caddyRedirect(rule configuration.Rule) string {
	return fmt.Sprintf(`
%s {
	redir %s{uri}
}
`, rule.Location, rule.RedirectTarget)
}
